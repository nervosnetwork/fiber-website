---
import ExpandFooter from "./ExpandFooter.astro";

const navLinks = [
	{ text: "About", href: "/", id: "about" },
	{ text: "Documentation", href: "/docs", id: "documentation" },
	{ text: "Community", href: "/community", id: "community" },
	{ text: "Milestones", href: "/milestones", id: "milestones" },
	{ text: "Hybrid Lightning Network", href: "/network", id: "network" },
];

const currentPathname =
	Astro.url.pathname.endsWith("/") && Astro.url.pathname.length > 1
		? Astro.url.pathname.slice(0, Astro.url.pathname.length - 1)
		: Astro.url.pathname;
---

<nav class="flex items-center justify-between py-4 px-5 md:px-10 lg:px-20">
  <a href="/" class="text-xl font-bold">
    <img src="/logo/black.svg" alt="Logo" class="h-10" />
  </a>
  <ul class="hidden lg:flex space-x-4">
    {
      navLinks.map((link) => {
        const isActive = currentPathname === link.href;
        return (
          <li>
            <a
              href={link.href}
              class={`nav-link px-4 py-2 rounded-full hover:bg-gray-700 hover:text-white transition-colors duration-200 border-1 border-black ${isActive ? "selected" : ""}`}
              id={`nav-link-${link.id}`}
              data-link-id={link.id}
            >
              {link.text}
            </a>
          </li>
          )
      })
    }
  </ul>

  <div
    class="flex lg:hidden bg-black p-2 rounded-xl cursor-pointer"
    id="mobile-menu-button"
  >
    <img src="/icons/menu.svg" alt="Menu" />
  </div>
</nav>

{/* Mobile Menu */}
<div
  id="mobile-menu"
  class="fixed top-0 left-0 w-full h-full bg-black text-white z-50 hidden"
>
  <div class="flex justify-between items-center align-middle p-4">
    <a href="/" class="text-xl font-bold">
      <img src="/logo/white.svg" alt="Logo" class="h-10" />
    </a>
    <button id="close-mobile-menu" class="">
      <img class="w-10 cursor-pointer" src="/icons/close.svg" alt="" />
    </button>
  </div>

  <div class="h-full">
    <ul class="text-left text-body1 mb-4">
      {
        navLinks.map((link) => {
        const isActive = currentPathname === link.href;
        return <li class="text-white mobile-nav-link">
            <a
              href={link.href}
              class={`block hover:bg-yellow hover:text-black p-4 ${isActive ? "selected" : ""}`}
            >
              {link.text}
            </a>
          </li>
        })
      }
    </ul>

    <div class="mt-20">
      <ExpandFooter />
    </div>
  </div>
</div>

<style>
  /* Default style for all links */
  .nav-link {
    background-color: var(--color-black);
    color: var(--color-text-on-color);
  }

  /* Style for the selected link */
  .nav-link.selected {
    background-color: var(--color-yellow);
    color: var(--color-text-primary);
    cursor: default;
  }

  .mobile-nav-link .selected {
    background-color: var(--color-yellow);
    color: var(--color-text-primary);
    cursor: default; 
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const navLinks = document.querySelectorAll(".nav-link");

    navLinks.forEach((link) => {
      link.addEventListener("click", (event) => {
        if (link.classList.contains("selected")) {
          // Tab is already active
          // Prevent the default behavior of the link
          return event.preventDefault();
        }

        // Remove 'selected' class from all links
        navLinks.forEach((l) => l.classList.remove("selected"));

        // Add 'selected' class to the clicked link
        link.classList.add("selected");

      });
    });

    // Mobile Menu
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const closeMobileMenuButton = document.getElementById("close-mobile-menu");

    mobileMenuButton?.addEventListener("click", () => {
      mobileMenu?.classList.remove("hidden");
    });

    closeMobileMenuButton?.addEventListener("click", () => {
      mobileMenu?.classList.add("hidden");
    });
  });
</script>
